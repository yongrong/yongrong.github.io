<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yongong&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yongrong.github.io/"/>
  <updated>2016-11-28T10:56:17.000Z</updated>
  <id>http://yongrong.github.io/</id>
  
  <author>
    <name>yongrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode: 460.LFU Cache</title>
    <link href="http://yongrong.github.io/2016/11/28/LeetCode-460-LFU-Cache/"/>
    <id>http://yongrong.github.io/2016/11/28/LeetCode-460-LFU-Cache/</id>
    <published>2016-11-28T10:21:50.000Z</published>
    <updated>2016-11-28T10:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/lfu-cache/" target="_blank" rel="external"><strong>LeetCode: 460. LFU Cache</strong></a></p>
<p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Least_frequently_used" target="_blank" rel="external">Least Frequently Used (LFU)</a> cache. It should support the following operations: <strong>get</strong> and <strong>set</strong>.</p>
<p><strong>get(key)</strong> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.</p>
<p><strong>set(key, value)</strong> - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least <strong>recently</strong> used key would be evicted.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LFUCache cache = new LFUCache( 2 /* capacity */ );</div><div class="line"></div><div class="line">cache.Set(1, 1);</div><div class="line">cache.Set(2, 2);</div><div class="line">cache.Get(1);       // returns 1</div><div class="line">cache.Set(3, 3);    // evicts key 2</div><div class="line">cache.Get(2);       // returns -1 (not found)</div><div class="line">cache.Get(3);       // returns 3.</div><div class="line">cache.Set(4, 4);    // evicts key 1.</div><div class="line">cache.Get(1);       // returns -1 (not found)</div><div class="line">cache.Get(3);       // returns 3</div><div class="line">cache.Get(4);       // returns 4</div></pre></td></tr></table></figure>
<p>我的解决方案，使用<strong>golang</strong>，cache数据使用<strong>map</strong>存储，访问平率frequency使用双链表存储，<strong>get</strong>操作复杂度为<strong>O(1)</strong>，<strong>set</strong>操作为<strong>O(N)</strong></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</div><div class="line">    Key       <span class="keyword">int</span> </div><div class="line">    Frequency <span class="keyword">int</span> </div><div class="line">    Prev      *DoubleLinkedList</div><div class="line">    Next      *DoubleLinkedList</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</div><div class="line">    kv       <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></div><div class="line">    head     *DoubleLinkedList</div><div class="line">    capacity <span class="keyword">int</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="keyword">int</span>)</span> <span class="title">LFUCache</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> cache LFUCache</div><div class="line">    cache.kv = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</div><div class="line">    cache.head = &amp;DoubleLinkedList&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</div><div class="line">    cache.head.Prev = cache.head</div><div class="line">    cache.head.Next = cache.head</div><div class="line">    cache.capacity = capacity</div><div class="line">    <span class="keyword">return</span> cache</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span> <span class="title">AddFrequency</span><span class="params">(key <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> p := this.head.Next; p != this.head; p = p.Next &#123;</div><div class="line">        <span class="keyword">if</span> p.Key == key &#123;</div><div class="line">            p.Next.Prev = p.Prev</div><div class="line">            p.Prev.Next = p.Next</div><div class="line"></div><div class="line">            p.Frequency++</div><div class="line">            p.Prev = this.head.Prev</div><div class="line">            p.Next = this.head</div><div class="line">            this.head.Prev.Next = p </div><div class="line">            this.head.Prev = p </div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    node := &amp;DoubleLinkedList&#123;key, <span class="number">1</span>, this.head.Prev, this.head&#125;</div><div class="line">    this.head.Prev.Next = node</div><div class="line">    this.head.Prev = node</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span> <span class="title">RemoveMinFrequency</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> this.head.Next == this.head &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    node := this.head.Next</div><div class="line">    min := node.Frequency</div><div class="line"></div><div class="line">    <span class="keyword">for</span> p := node.Next; p != this.head; p = p.Next &#123;</div><div class="line">        <span class="keyword">if</span> p.Frequency &lt; min &#123;</div><div class="line">            node = p</div><div class="line">            min = p.Frequency</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">delete</span>(this.kv, node.Key)</div><div class="line">    node.Next.Prev = node.Prev</div><div class="line">    node.Prev.Next = node.Next</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    value, ok := this.kv[key]</div><div class="line">    <span class="keyword">if</span> ok &#123;</div><div class="line">        this.AddFrequency(key)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span> <span class="title">Set</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> this.capacity == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    _, ok := this.kv[key]</div><div class="line">    <span class="keyword">if</span> !ok &amp;&amp; <span class="built_in">len</span>(this.kv) == this.capacity &#123;</div><div class="line">        this.RemoveMinFrequency()</div><div class="line">    &#125;</div><div class="line">    this.kv[key] = value</div><div class="line">    this.AddFrequency(key)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/lfu-cache/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;LeetCode: 460. LFU Cache&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;De
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yongrong.github.io/tags/leetcode/"/>
    
      <category term="LFU" scheme="http://yongrong.github.io/tags/LFU/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yongrong.github.io/2016/11/28/test/"/>
    <id>http://yongrong.github.io/2016/11/28/test/</id>
    <published>2016-11-28T06:56:31.000Z</published>
    <updated>2016-11-28T08:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是<strong>新的开始</strong>，我用hexo创建了第一篇文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是&lt;strong&gt;新的开始&lt;/strong&gt;，我用hexo创建了第一篇文章。&lt;/p&gt;

    
    </summary>
    
      <category term="日志" scheme="http://yongrong.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="test" scheme="http://yongrong.github.io/tags/test/"/>
    
      <category term="hexo" scheme="http://yongrong.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yongrong.github.io/2016/10/21/hello-world/"/>
    <id>http://yongrong.github.io/2016/10/21/hello-world/</id>
    <published>2016-10-21T04:09:18.000Z</published>
    <updated>2016-10-21T04:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
